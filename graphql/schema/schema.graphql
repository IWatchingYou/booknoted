type File {
    id: ID!
    path: String!
    filename: String!
    mimetype: String!
    encoding: String!
}

type User {
    id: ID,
    first_name: String,
    last_name: String,
    gender: String,
    username: String,
    picture: String,
    created_at: String,
    updated_at: String,
    friends: [User]
}

type Book {
    id: ID,
    title: String,
    picture: [String],
    love: Int,
    comment: Int,
    created_at: String,
    updated_at: String,
    user: User,
    isLove: Boolean
}

type Picture {
    id: ID,
    filename: String,
    created_at: String,
    updated_at: String
}

type Comment {
    id: ID,
    book_id: Int,
    user_id: Int,
    user: User,
    book: Book,
    comment: String,
    created_at: String,
    updated_at: String
}

type Love {
    user_id: Int,
    book_id: Int,
    created_at: String,
    updated_at: String
}

type Friend {
    user: User,
    approved: Boolean,
    created_at: String,
    updated_at: String
}

type Notification {
    id: ID,
    user_id: Int,
    type: String,
    on_id: Int,
    status: Boolean,
    book: Book,
    user: User,
    created_at: String,
    updated_at: String
}

type Message {
    sender: Int!,
    receiver: Int!,
    content: String,
    picture: String,
    type: String,
    created_at: String
}

type History {
    user: User,
    sender: Int!,
    receiver: Int!,
    content: String,
    picture: String,
    type: String,
    created_at: String
}

input messageInput {
    receiver: Int!,
    content: String!,
    picture: String,
    type: String
}

input UserInput {
    first_name: String!,
    last_name: String!,
    gender: String,
    username: String!,
    password: String!
}

input BookInput {
    title: String,
    picture: [String]
}

input CommentInput {
    book_id: Int,
    comment: String
}

type Query {
    getUserList: [User],
    getUser(id: Int!): User,
    getBookList: [Book],
    getBook(id: Int!): Book
    me: User,
    getPictureList: [Picture],
    getCommentList(book_id: Int!): [Comment]
    getLoveList: [Love]
    getLove(book_id: Int!): Love,
    getNotificationList: [Notification],
    getNotificationCount: Int,
    getFriendList: [Friend],
    getMessage(sender: Int!, receiver: Int!): [Message]
    getMessageHistory: [Message]
}

type Mutation {
    createUser(data: UserInput!): Boolean,
    login(username: String!, password: String!): String,
    createBook(data: BookInput!): Boolean,
    singleUpload(file: Upload!): String,
    createLove(id: Int!): Boolean,
    createComment(data: CommentInput!): Boolean,
    setStatus(id: Int!): Boolean,
    FriendAdd(id: Int!): Boolean,
    FriendApproved(id: Int!): Boolean,
    sendMessage(data: messageInput!): Boolean
}

type Subscription {
    LoveSubscription: Boolean,
    CommentSubscription: Boolean,
    MessageSubscription: Message
}